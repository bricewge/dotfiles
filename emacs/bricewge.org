#+TITLE: Brice Waegeneire's Emacs configuration
#+AUTHOR: Brice Waegeneire
#+OPTIONS: toc:4 h:4

* About this file
Inspired by [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha's configuration]] organisation.
** init.el
{% raw %}
The =init.el= file is needed to bootstrap my actual configuration of
Emacs (ie: =bricewge.org=).
#+BEGIN_SRC emacs-lisp :tangle init.el
  ;;  This file is needed to bootstrap the Emacs' configuration.

  ;;; Interface
  ; Turn off the mouse interface early to avoid momentary displaying it
  (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))


  ;;; Package management
  ;;;; ELPA
  (require 'package)
  ;; List of elpa repository
  (setq package-archives '(("ELPA" . "http://tromey.com/elpa/")
                           ("gnu" . "https://elpa.gnu.org/packages/")
                           ("marmalade" . "https://marmalade-repo.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")
                           ("melpa-stable" . "https://stable.melpa.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")))
  (package-initialize)
  (setq package-enable-at-startup nil)

  ;;;; use-package
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (eval-when-compile
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)

  ;;;; Quelpa
  ; [[https://github.com/quelpa/quelpa][Quelpa]] is usefull when a
  ; package is not yet in MELPA or need a patch. It can be build from source and installed with =package.el= seamlessly.
  (use-package quelpa
    :ensure t
    :init
    (setq quelpa-update-melpa-p nil))

  ; Enable the use of Quelpa with use-package.
  (use-package quelpa-use-package
    :ensure t
    :config
    (quelpa-use-package-activate-advice))

  ;;; org-mode
  (use-package org
    :ensure org-plus-contrib
    :pin org)

  ;;; org-babel
  ; The actual configuration in a literate programming style
  (org-babel-load-file (expand-file-name "bricewge.org" user-emacs-directory))
#+END_SRC

** Dependencies
This configuration file assume that you are using Emacs 24 or higer.
Dependencies needed :
- pythonÂ¿2?-virtualenv, for jedi
- Meslo LG S, font
- git, for quelpa recepies
- languagetool, for langtool
- ledger, for ledger
- enchant, for wcheck-mode
- hunspell-fr et hunspell-en, dictionnaries for wcheck-mode
- aspell-fr et aspell-en, dictionnaries for wcheck-mode
- mu, for email
- graphicsmagick, for taking screnshot with org-download
- git-wip (https://github.com/itsjeyd/git-wip), for git-wip-timemachine
- wmctrl, for fullscreen
** Personal information
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Brice Waegeneire"
      user-mail-address "brice.wge@gmail.com")
#+END_SRC

* Appearence
** Startup
Use the bookmark buffer as my startup buffer.
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'bookmark-bmenu-list)
  (setq initial-buffer-choice (lambda () (get-buffer "*Bookmark List*")))
  (setq inhibit-startup-message t)
#+END_SRC

Hide the GNU advertisment in the modline and the hints header of scratch buffer .
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-echo-area-message "bricewge")
  (setq initial-scratch-message nil)
#+END_SRC

** Themes
*** Solarized
Use a decent theme.

I only want to use fixed fonts no matter what. Without it collum
allignement is not working anymore because all the characters doesn't
have the same width. Fix the underline position of Meslo for
solarized-theme
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :config
    (setq solarized-use-variable-pitch nil)
    (setq x-underline-at-descent-line t))

  (load-theme 'solarized-dark t)
#+END_SRC

** Fonts
Use ~Meslo~ font as standalone and client.

As emacs seems to give a fuck about
=~/.config/fontconfig/conf.d/10-powerline-symbols.conf= I have to add
PowerlineSymbols by hand "Private Use Area" U+E000 - U+F8FF
#+BEGIN_SRC emacs-lisp
  (set-default-font "Meslo LG S 12")
  (add-to-list 'default-frame-alist '(font . "Meslo LG S 12")) ;; For emacsclient
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle no
  ;; (setq my-fonts '("Meslo LG S 12"))
  ;; (create-fontset-from-fontset-spec standard-fontset-spec) ;to make --daemon work
  ;; (dolist (font (reverse my-fonts))
  ;;   (set-fontset-font "fontset-standard" 'unicode font nil 'prepend))
  ;; (add-to-list 'default-frame-alist '(font . "fontset-standard"))

  (set-fontset-font "fontset-standard"
                                  (cons (decode-char 'ucs #xE000)
                                        (decode-char 'ucs #xF8FF))
                                  "PowerLineSymbols")
  ;; (set-face-font 'default "fontset-standard")
  ;; (add-hook 'server-switch-hook (set-face-font 'default "fontset-standard"))
#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp
  ;; Non-bliking cusrsor
  (blink-cursor-mode -1)
  (setq-default cursor-type 'bar)

  ;; More smooth scrolling
  (setq mouse-wheel-scroll-amount '(0.01))

  ;; Enable "^" on mac keybord
  (load-library "iso-transl")

  ;; Enable fullscren with F11
  ;; Need wmctrl to be installed
  (defun switch-full-screen ()
    (interactive)
    (shell-command "wmctrl -r :ACTIVE: -btoggle,fullscreen"))
  (global-set-key [f11] 'switch-full-screen)

#+END_SRC
** modline
#+BEGIN_SRC emacs-lisp
  ;; Show colum number in the modeline
  (setq column-number-mode t)
#+END_SRC
*** smart-modline
#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :ensure t
    :config
    (sml/setup))
#+END_SRC

*** battery
Show the battery in the modline
#+BEGIN_SRC emacs-lisp
  (setq display-battery-mode t)
#+END_SRC
** sublimity						      :old:
Give Emacs a little bit of the Sublime style by centering the buffer
when there are egnouth space.
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package sublimity
    :ensure t
    :config
    (require 'sublimity-attractive)
    (sublimity-mode 1)
    (setq sublimity-attractive-centering-width 110))
#+END_SRC

When using =sublimity= if you want to still let Emacs automaticaly
spliting windows verticaly, =split-width-threshold= should be >= to
=sublimity-attractive-centering-widt=. Otherwise it'll always be split
horizontaly because the width of the window will never be large enougth.
#+BEGIN_SRC emacs-lisp
  (setq split-width-threshold 145)
#+END_SRC
** Bell
Disabel the annoying beep sound and the visual-bell once and for all.
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
#+END_SRC
* Emacs general
** auth-source
#+BEGIN_SRC emacs-lisp
  (require 'auth-source)
  (setq auth-sources '("~/.authinfo.gpg"))
#+END_SRC
** system
Use french translation for time.
#+BEGIN_SRC emacs-lisp
  (setq system-time-locale "fr_FR.UTF-8")
#+END_SRC

** savehist
Set up a directory for putting all the files which save some kind of
history of the actions done in Emacs.
#+BEGIN_SRC emacs-lisp
  (setq bricewge/emacs-history-directory
        (expand-file-name "history/" user-emacs-directory))
  (unless (file-exists-p bricewge/emacs-history-directory)
    (make-directory bricewge/emacs-history-directory t))
#+END_SRC

Save the history of the minibuffer.
#+BEGIN_SRC emacs-lisp
  (setq savehist-file (expand-file-name "savehist" bricewge/emacs-history-directory))
  (savehist-mode 1)
#+END_SRC
** Backups
Create a directory to put saves of files edited with Emacs.
#+BEGIN_SRC emacs-lisp
  (unless (file-exists-p (expand-file-name "save/" user-emacs-directory))
    (make-directory (expand-file-name "save/" user-emacs-directory)))
#+END_SRC

Don't put backups all over the filesystem but within =~/.emacs.d=. Use sane options for backup
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,(expand-file-name "save/" user-emacs-directory))))

  (setq make-backup-files t               ; backup of a file the first time it is saved.
        backup-by-copying t               ; don't clobber symlinks
        version-control t                 ; version numbers for backup files
        delete-old-versions t             ; delete excess backup files silently
        delete-by-moving-to-trash t
        kept-old-versions 6               ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 9)              ; newest versions to keep when a new numbered backup is made (default: 2))
#+END_SRC

** Auto-save
Don't litter the filesystem with =#foo.bar#= files everywhere, put
them in the saved files directory.
#+BEGIN_SRC emacs-lisp
  (setq backup-directory-alist
        `((".*" . ,(expand-file-name "save/" user-emacs-directory))))

  (setq auto-save-default t               ; auto-save every buffer that visits a file
        auto-save-timeout 20              ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200)           ; number of keystrokes between auto-saves (default: 300)
#+END_SRC

** Custom-file
Save customization in an other file Load the custom file at the
begginig, in that way it can be overwritten by this config file.
I got this snippet from [[https://github.com/purcell/emacs.d/blob/3d78c86d0edf205d062426d1cc8ecb06bc0a4f18/init.el#L125][purcell/emacs.d]].
#+BEGIN_SRC emacs-lisp
  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

** Question
Shorctut all responses to "yes or no" questions to "y" and "n".
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
* Custom functions and variables

* Org-Mode
*** General
Org-Mode is installed and loaded in =init.el=.
**** Modules
Instead of doing =(require 'org-foo)= all over the place try to use
org-module instead.
#+BEGIN_SRC emacs-lisp
  (setq org-modules '(org-habit
                      org-protocol
                      org-bibtex
                      org-crypt
                      ;; Modules not built-in
                      org-drill
                      org-bullets))
#+END_SRC
**** Appearance
#+BEGIN_SRC emacs-lisp
  ;; Use fancy UTF-8 bullets for the headings.
  (add-hook 'org-mode-hook 'org-bullets-mode)

  ;; Soft wrapped line at word boundary.
  (add-hook 'org-mode-hook 'visual-line-mode)

  ;; Display entities as UTF-8 characters.
  (setq org-pretty-entities t)

  ;; Show decent width image at startup.
  (setq org-image-actual-width '(600))
  (setq org-startup-with-inline-images t)

  ;(setq org-startup-with-latex-preview t)

  ; Set tags not to far from the headline because the font size reduce the space
  ; availaible
  (setq org-tags-column -67)

  ; Replace the "..." of folded headings by something more fancy
  (setq org-ellipsis "â¤µ")
#+END_SRC
**** Misc
#+BEGIN_SRC emacs-lisp
(setq org-drill-scope 'file) ; Other value: directory

;; Standard key bindings
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)

(setq org-directory "~/org")

;; Does not set a indentation level when moving heading
(setq org-adapt-indentation nil)
#+END_SRC

**** org-crypt
Encrypt org-mode
#+BEGIN_SRC emacs-lisp
  ;; Encrypt all entries before saving
  (eval-after-load 'org-crypt
    '(org-crypt-use-before-save-magic))
  (setq org-tags-exclude-from-inheritance (quote ("crypt")))
  ; GPG key to use for encryption: brice.wge@gmail.com
  (setq org-crypt-key "116F0F99")
#+END_SRC

**** org-entities
Add specials symbols.
#+BEGIN_SRC emacs-lisp
(setq org-entities-user '(
;			  ("space" "\\ " nil " " " " " " " ")
			  ("male" "\\male " t "&#9794" "[male symbol]" "[male symbol]" "â")
			  ("female" "\\female " t "&#9792" "[female symbol]" "[female symbol]" "â")
			  ("ohm" "\\ohm " t "&&Omega" "[Omega]" "[Omega]" "Î©")
			  ))
#+END_SRC
*** MobileOrg
#+BEGIN_SRC emacs-lisp
(setq org-mobile-directory "~/ownCloud")
;(setq org-mobile-files "~/org")
(setq org-mobile-inbox-for-pull "~/ownCloud/mobileorg.org")
#+END_SRC
*** Exporting
**** General
#+BEGIN_SRC emacs-lisp
  ;; Add exporter
  (setq org-export-backends '(ascii
                              latex
                              md
                              odt
                              ; Not part of Emacs
                              koma-letter
                              ))
#+END_SRC

Utility needed to export to html in some edge-cases.
#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :ensure t)
#+END_SRC
**** XeLaTeX
May need some tweaking, see here http://kieranhealy.org/esk/kjhealy.html#sec-1-5-5.
***** Word processor
#+BEGIN_SRC emacs-lisp
(setq org-latex-pdf-process
      '("xelatex -interaction nonstopmode -output-directory %o %f"
	"biber %b"
        "xelatex -interaction nonstopmode -output-directory %o %f"
        "xelatex -interaction nonstopmode -output-directory %o %f"))
#+END_SRC
***** Packages
List of TEX packages used by default.

#+BEGIN_SRC emacs-lisp
  (setq org-latex-default-packages-alist
        '(
          ("" "fontspec" t)
          ("" "polyglossia" t)
          ;; ("AUTO" "inputenc" t)
          ;; ("T1" "fontenc" t)
          ("" "fixltx2e" nil)
          ("" "graphicx" t)
          ("" "longtable" nil)
          ("" "float" nil)
          ("" "wrapfig" nil)
          ("" "rotating" nil)
          ("normalem" "ulem" t)
          ("" "amsmath" t)
          ("" "textcomp" t)
          ("" "marvosym" t)
          ("" "wasysym" t)
          ("" "amssymb" t)
          ("" "capt-of" nil)
          ("" "hyperref" nil)
          ("" "unicode-math" t) ;; Need to be after all math packages
          "\\tolerance=1000"
          "\\setdefaultlanguage{french}")
        )
#+END_SRC

List of packages for latex, used in:
- latex fragments
- compte-rendu
#+BEGIN_SRC emacs-lisp
  (setq org-latex-packages-alist
        '(("" "chemfig" t)
          ))
#+END_SRC

***** Classes
Defined custom classes.
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'ox-latex
    '(add-to-list 'org-latex-classes
                  '("compte-rendu"
                    "\\documentclass[a4paper, 11pt, titlepage]{scrartcl}
       [DEFAULT-PACKAGES]
       [PACKAGES]
       \\usepackage{csquotes}
       \\usepackage[stylee, backendbiber]{biblatex}
       \\defaultfontfeatures{LigatureseX}
       \\setmainfont[Mappingex-text]{Linux Libertine O}
       \\setsansfont{Linux Biolinum O}
       \\setdefaultlanguage{french}
       [EXTRA]"
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+END_SRC

Letter export with koma-script.
#+BEGIN_SRC emacs-lisp
  (eval-after-load 'ox-latex
    '(add-to-list 'org-latex-classes
                 '("letter"
                   "\\documentclass\[%
      DIV=14,
      fontsize=12pt,
      parskip=half,
      subject=titled,
      backaddress=false,
      fromalign=left,
      fromemail=true,
      fromphone=false\]\{scrlttr2\}
      \[DEFAULT-PACKAGES]
      \[PACKAGES]
      \[EXTRA]")))

  (setq org-koma-letter-default-class "letter")
#+END_SRC

***** Filtres
#+BEGIN_SRC emacs-lisp
  (defun org-latex-filter-textsuperscript (text backend info)
    "Export \"^string\" as \"textsuperscript{string}\"."
    (when (org-export-derived-backend-p backend 'latex)
      (replace-regexp-in-string "\\$\\^{\\\\text{\\([^\"]+?\\)}}\\$" "\\\\textsuperscript{\\1}" text)))

  (eval-after-load 'ox-latex
    '(add-to-list 'org-export-filter-superscript-functions
                  'org-latex-filter-textsuperscript))

  (defun org-latex-filter-textsubscript (text backend info)
    "Export \"^string\" as \"textsubscript{string}\"."
    (when (org-export-derived-backend-p backend 'latex)
      (replace-regexp-in-string "\\$_{\\\\text{\\([^\"]+?\\)}}\\$" "\\\\textsubscript{\\1}" text)))

  (eval-after-load 'ox-latex
    '(add-to-list 'org-export-filter-subscript-functions
                  'org-latex-filter-textsubscript))
#+END_SRC

***** Fragments
Use =imagemagick= to create inline LaTeX fragments. Scale the created
images to 1.5 in the buffer but don't scale them on html exports. And
put all these fragments in =~/.emacs.d/org/ltxpng=.
#+BEGIN_SRC emacs-lisp
  (setq org-latex-create-formula-image-program 'imagemagick)

  (setq org-format-latex-options
        '(:foreground default
                      :background default
                      :scale 1.5
                      :html-foreground "Black"
                      :html-background "Transparent"
                      :html-scale 1.0
                      :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))

  (setq org-latex-preview-ltxpng-directory
        (expand-file-name "org/ltxpng/" user-emacs-directory))
#+END_SRC

**** HTML
Needed for deck.js export.
#+BEGIN_SRC emacs-lisp
(setq org-html-doctype "html5")
#+END_SRC

***** Mathjax
Use MathJax.org server. Added =mhchem= extension for writing chemical
expressions.
#+BEGIN_SRC emacs-lisp
  (setq org-html-mathjax-template "<script type=\"text/x-mathjax-config\">\nMathJax.Hub.Config({\n  \"HTML-CSS\": {\nlinebreaks: { automatic: true } },\n         SVG: { linebreaks: { automatic: true } }\n});\n</script>\n<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>\n<script type=\"text/javascript\">\n<!--/*--><![CDATA[/*><!--*/\n    MathJax.Hub.Config({\n        // Only one of the two following lines, depending on user settings\n        // First allows browser-native MathML display, second forces HTML/CSS\n        :MMLYES: config: [\"MMLorHTML.js\"], jax: [\"input/TeX\"],\n        :MMLNO: jax: [\"input/TeX\", \"output/HTML-CSS\"],\n        extensions: [\"tex2jax.js\",\"TeX/AMSmath.js\",\"TeX/AMSsymbols.js\",\n                     \"TeX/noUndefined.js\", \"TeX/mhchem.js\"],\n        tex2jax: {\n            inlineMath: [ [\"\\\\(\",\"\\\\)\"] ],\n            displayMath: [ ['$$','$$'], [\"\\\\[\",\"\\\\]\"], [\"\\\\begin{displaymath}\",\"\\\\end{displaymath}\"] ],\n            skipTags: [\"script\",\"noscript\",\"style\",\"textarea\",\"pre\",\"code\"],\n            ignoreClass: \"tex2jax_ignore\",\n            processEscapes: false,\n            processEnvironments: true,\n            preview: \"TeX\"\n        },\n        showProcessingMessages: true,\n        displayAlign: \"%ALIGN\",\n        displayIndent: \"%INDENT\",\n\n        \"HTML-CSS\": {\n             scale: %SCALE,\n             availableFonts: [\"STIX\",\"TeX\"],\n             preferredFont: \"TeX\",\n             webFont: \"TeX\",\n             imageFont: \"TeX\",\n             showMathMenu: true,\n        },\n        MMLorHTML: {\n             prefer: {\n                 MSIE:    \"MML\",\n                 Firefox: \"MML\",\n                 Opera:   \"HTML\",\n                 other:   \"HTML\"\n             }\n        }\n    });\n/*]]>*///-->\n</script>")
#+END_SRC

**** ioslide
Create some [[https://coldnew.github.io/slides/org-ioslide/#1][nice presentation]] in HTML5.
#+BEGIN_SRC emacs-lisp
  (use-package ox-ioslide
    :ensure t
    :config (require 'ox-ioslide-helper))
#+END_SRC
**** ox-twbs
#+BEGIN_SRC emacs-lisp
  (use-package ox-twbs
    :ensure t
    :config
    (setq org-twbs-mathjax-template org-html-mathjax-template))
#+END_SRC
*** Publishing
**** General
Republie tout a chaque fois, utlisation pendant la configuration
#+BEGIN_SRC emacs-lisp
(setq org-publish-use-timestamps-flag nil)

(setq org-export-allow-bind-keywords t)

; Inline images in HTML instead of producting links to the image
(setq org-html-inline-images t)
(setq org-html-head-include-default-style nil)
; Do not generate internal css formatting for HTML exports
(setq org-html-htmlize-output-type 'css)
#+END_SRC

**** University
#+BEGIN_SRC emacs-lisp
(defvar bwge-uni-base "~/Dropbox/UniversitÃ©/"
  "Path to the uni directory.")
(defvar bwge-uni-htmlroot "~/repos/uni.bricewge.fr"
  "Where to export the uni website.")

(add-to-list 'org-publish-project-alist
	     '("uni" :components ("uni-html" "uni-source" "uni-extra"))
	     t)

(add-to-list 'org-publish-project-alist
	     `("uni-html"
	       :base-directory ,bwge-uni-base
	       :publishing-directory ,bwge-uni-htmlroot
	       :exclude "\\(Fiches\\|TP\\|TD\\|S[0-9].org\\)"
	       :recursive t
	       :base-extension "org"
	       :publishing-function org-html-publish-to-html
	       :section-numbers nil
	       :language "fr"
	       :headline-levels 6
	       :with-toc nil
	       :html-postamble nil
	       :html-head  "<link rel=\"stylesheet\" href=\"/home/bricewge/repos/uni.bricewge.fr/static/normalize.css\" type=\"text/css\"/>\n<link rel=\"stylesheet\" href=\"/home/bricewge/repos/uni.bricewge.fr/static/style.css\" type=\"text/css\"/>\n<link href='http://fonts.googleapis.com/css?family=Cardo:400,400italic,700&subset=latin,latin-ext' rel='stylesheet' type='text/css'>\n"
	       :html-link-home "/index.html"
	       :html-doctype "html5"
	       :html-html5-fancy t
	       :auto-sitemap t
	       :sitemap-filename "/index.org"
	       :sitemap-title "Notes de cours")
	     t)

(add-to-list 'org-publish-project-alist
	     `("uni-extra"
	       :base-directory ,bwge-uni-base
	       :publishing-directory ,bwge-uni-htmlroot
	       :exclude "\\(Fiches\\|TP\\|TD\\|S[0-9].org\\)"
	       :base-extension "css\\|png\\|svg"
	       :publishing-function org-publish-attachment
	       :recursive t)
	     t)

(add-to-list 'org-publish-project-alist
	     `("uni-source"
	       :base-directory ,bwge-uni-base
	       :publishing-directory ,bwge-uni-htmlroot
	       :exclude "\\(Fiches\\|TP\\|TD\\|S[0-9].org\\)"
	       :base-extension "org"
	       :publishing-function org-org-publish-to-org;org-publish-attachment
	       :recursive t
	       :htmlized-source t
	       :plain-source t)
	     t)
#+END_SRC

**** Pelican
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-publish-project-alist
	     '("pelican" :components ("pelican-md" "pelican-extra"))
	     t)

(add-to-list 'org-publish-project-alist
	     '("pelican-md"
	       :base-directory "~/Pelican"
	       :publishing-directory "~/git/bricewge.fr/content/Blog"
	       :recursive t
	       :base-extension "org"
	       :publishing-function org-md-publish-to-md
	       :with-toc nil
	       :section-numbers nil
	       :with-tags nil
	       :with-timestamps nil)
	     t)

(add-to-list 'org-publish-project-alist
	     '("pelican-extra"
	       :base-directory "~/Pelican/Images"
	       :publishing-directory "~/git/bricewge.fr/content/images"
	       :recursive t
	       :base-extension "css\\|png\\|svg"
	       :publishing-function org-publish-attachment)
	     t)
#+END_SRC

**** Blog
#+BEGIN_SRC emacs-lisp
(defvar bwge-blog-base "~/org/blog"
  "Path to the blog directory.")
(defvar bwge-blog-htmlroot "~/repos/bricewge.fr"
  "Where to export the blog website.")

(add-to-list 'org-publish-project-alist
	     '("blog" :components ("blog-content" "blog-static"))
	     t)

(add-to-list 'org-publish-project-alist
	     `("blog-content"
	       :base-directory ,bwge-blog-base
	       :base-extension "org"
	       :publishing-directory ,bwge-blog-htmlroot
               :html-extension "html"
	       :publishing-function org-html-publish-to-html
	       :auto-sitemap t
	       :sitemap-filename "archive.org"
	       :sitemap-title "Archive"
	       :sitemap-sort-files anti-chronologically
	       :sitemap-style list
	       :makeindex t
	       :recursive t
	       :section-numbers nil
	       :with-toc nil
	       :with-latex t
	       :with-author nil
	       :with-creator nil
	       :html-doctype "html5"
	       :html-html5-fancy t
	       :html-head-include-default-style nil
	       :html-head-include-scripts nil
	       :html-preamble org-mode-blog-preamble
	       :html-postamble nil
	       :html-head  "<link rel=\"stylesheet\" href=\"static/style.css\" type=\"text/css\"/>\n")

	     t)

(add-to-list 'org-publish-project-alist
             `("blog-rss"
               :base-directory ,bwge-blog-base
               :base-extension "org"
               :publishing-directory ,bwge-blog-htmlroot
               :publishing-function org-rss-publish-to-rss
               :html-link-home "https://bricewge.fr/"
               :html-link-use-abs-url t)
	     t)

(add-to-list 'org-publish-project-alist
        `("blog-static"
         :base-directory ,bwge-blog-base
	 :publishing-directory ,bwge-blog-htmlroot
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|ico"
         :publishing-directory org-mode-blog-publishing-directory
         :recursive t
         :publishing-function org-publish-attachment)
	t)
#+END_SRC
***** Preamble
Create the sidebar.

#+BEGIN_SRC emacs-lisp
(defun org-mode-blog-preamble (options)
  "The function that creates the preamble (sidebar) for the blog.
OPTIONS contains the property list from the org-mode export."
  (let ((base-directory (plist-get options :base-directory)))
    (org-babel-with-temp-filebuffer (expand-file-name "html/preamble.html" base-directory) (buffer-string))))
#+END_SRC
*** Tasks
#+BEGIN_SRC emacs-lisp
  ;; Changing a task state is done with C-c C-t KEY
  (setq org-use-fast-todo-selection t)
  ;; Change a todo state with S- rigth and left arrows
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)

  ;; Set task states sequences as http://doc.norang.ca/org-mode.html#TodoKeywordTaskStates
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))
  ;; Set the faces of the todo keywords
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "#dc322f" :weight bold)
                ("NEXT" :foreground "#268bd2" :weight bold)
                ("DONE" :foreground "#859900" :weight bold)
                ("WAITING" :foreground "#cb4b16" :weight bold)
                ("HOLD" :foreground "#d33682" :weight bold)
                ("CANCELLED" :foreground "#859900" :weight bold)
                )))

  (setq org-log-done (quote time)) ;; Log the time when a task is marked as DONE
  (setq org-log-into-drawer t)  ;; Keep the log info in the :LOGBOOK: drawer
  ; Log the change when rescheduling
  (setq org-log-reschedule 'note)
#+END_SRC
*** Dates and times
**** org-agenda
Make a shortcut to change the state of a TODO item done yesterday.
#+BEGIN_SRC emacs-lisp
  (use-package org-agenda
    :commands (org-agenda)
    :config
    (bind-key "Y" 'org-agenda-todo-yesterday org-agenda-mode-map)
    )
#+END_SRC

Display the =org-agenda= each morning to not forget to check it.
#+BEGIN_SRC emacs-lisp
  (when (daemonp)
    (run-at-time "4:30am" (* 3600 24) 'org-agenda nil "a"))
  ;; ;; Clean the old buffers
  ;; (require 'midnight)
  ;; ;; Switch to org-agenda every day at 4:30
  ;; (midnight-delay-set 'midnight-delay "4:30am")
  ;; (add-hook 'midnight-hook (lambda () (org-agenda nil "a")))
#+END_SRC

Set the week view of the =org-agenda= to show the next 7 days instead
of the current week.
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-start-on-weekday nil)
#+END_SRC

**** org-habit
Display habits, like the [[http://lifehacker.com/281626/jerry-seinfelds-productivity-secret]["don't break the chain"]] trick, in
=org-agenda= begining at the 85th column. The habits for all the
upcoming days are displayed (ie: not only for today). When done they
show up as green, even when they are overdue and a timestamp is
recorded. To display the habits in the org-agenda press the "K" key?
#+BEGIN_SRC emacs-lisp
  (setq org-habit-graph-column 85
        org-habit-show-habits-only-for-today nil
        org-habit-show-done-always-green t
        org-log-repeat 'time
        org-habit-show-habits nil)

#+END_SRC
*** Capture Refill Archive
**** Capture
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file (concat org-directory "/inbox.org"))
(define-key global-map "\C-cc" 'org-capture)

;; Needed to add others items to the list, prefer using "add-to-list".
(setq org-capture-templates '())
#+END_SRC

***** Workout
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-capture-templates
	     '("w" "Journal de musculation")
	     t)

(add-to-list 'org-capture-templates
	     '("w2"
	       "II deuxiÃ¨me niveau"
	       entry
	       (file+headline "~/org/lafay.org" "Niveau II")
	       (file "~/.emacs.d/org/template/lafay-2.tpl.org")
	       :clock-in t :clock-resume t :unnarrowed t :empty-lines 1)
	     t)

(add-to-list 'org-capture-templates
	     '("w3"
	       "III troisiÃ¨me niveau"
	       entry
	       (file+headline "~/org/lafay.org" "Niveau III")
	       (file "~/.emacs.d/org/template/lafay-3.tpl.org")
	       :clock-in t :clock-resume t :unnarrowed t :empty-lines 1)
	     t)
#+END_SRC

***** Journal
Capture a journal entry.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-capture-templates
	     '("j"
	       "Journal personnel"
	       plain
	       (file+datetree "~/org/journal.org.gpg")
	       "%U\n%?"
	       :kill-buffer t)
	     t)
#+END_SRC

***** Todo
Capture a TODO in =inbox.org=.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-capture-templates
	     '("t"
	       "TODO"
	       entry
	       (file "~/org/inbox.org")
	       "* TODO %?\n%U\n"
	       :clock-in t :clock-resume t)
	     t)
#+END_SRC

***** Note
Capture a note in =inbox.org=.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-capture-templates
               '("n"
                 "Note"
                 entry
                 (file "~/org/inbox.org")
                 "* %? :NOTE:\n%U\n"
                 )
               t)
#+END_SRC

***** Achat
Capture a buying item in =inbox.org=.
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-capture-templates
	     '("a"
	       "Achat"
	       checkitem
	       (file+olp "~/org/organisation.org" "Achats" "Besoins")
	       )
	     t)
#+END_SRC
***** Billet de blog
#+BEGIN_SRC emacs-lisp
  (defun bwge/capture-blog-draft-file (path)
    (let ((name (read-string "Name: ")))
      (expand-file-name (format "%s-%s.org"
                                (format-time-string "%Y-%m-%d")
                                name) path)))

  (add-to-list 'org-capture-templates
               '("p"
                 "Billet de blog"
                 plain
                 (file (bwge/capture-blog-draft-file "~/projet/blog.bricewge.fr/posts"))
                 (file "~/.emacs.d/org/template/blog.tpl.org")
                 )
               t)
#+END_SRC

***** TODO Bibliography
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-capture-templates
               '("b"
                 "EntrÃ©e bibliographique"
                 entry
                 (file "~/org/biblio.org")
                 (file "~/.emacs.d/org/template/bibliography.tpl.org")
                 )
               t)
#+END_SRC

**** Attachments
#+BEGIN_SRC emacs-lisp
  (setq org-attach-directory "attachment/")
#+END_SRC
**** Refill
Refelling targets include this file and any file contributing to the
agenda ; up to 9 levels deep.
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))
#+END_SRC

**** Archive
Archive subtree in a separate directory. When archiving never change
the state of a task. The archived tree is the first child of the
archiving heading, not last.

#+BEGIN_SRC emacs-lisp
(setq org-archive-location (concat org-directory "/archive/%s_archive::* Archived Tasks"))
(setq org-archive-mark-done nil)
(setq org-archive-reversed-order t)
#+END_SRC

*** Source code
Color the code blocks. When editing a code blocks the current window
is used instead of displaying only displaying only both initial and
current windows.
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-window-setup 'current-window)
#+END_SRC

**** Babel
Enable babel for :
- python2
- emacs-lisp
- R
#+BEGIN_SRC emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((python . t)
     (emacs-lisp . t)
     (R . t)
     ))

  (setq org-babel-python-command "python2")
#+END_SRC

After evaluating a code block, refresh the inlines images in case it
has changed.
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-babel-after-execute-hook 'org-redisplay-inline-images)
#+END_SRC
*** Other org-mode modes

**** org-page
#+BEGIN_SRC emacs-lisp
  (use-package org-page
               :ensure t)

  (setq op/repository-directory "/home/bricewge/repo/blog.bricewge.fr")
  (setq op/site-domain "https://bricewge.fr/")
  (setq op/site-main-title "Brice Waegeneire")
  (setq op/site-sub-title "C'est toujours le bazar!")
  (setq op/page-template "<!DOCTYPE html>\n<html lang=\"fr-fr\">\n{{{header}}}\n  <body class=\"container\">\n{{{nav}}}\n{{{content}}}\n{{{footer}}}\n  </body>\n</html>\n")
  (setq op/repository-org-branch "source")
  (setq op/repository-html-branch "master")
  (setq op/personal-github-link "https://github.com/bricewge")
  (setq op/theme 'mbo) ;; (setq op/theme 'babushk)
#+END_SRC

**** kanban
#+BEGIN_SRC emacs-lisp
  (use-package kanban
               :ensure t)
#+END_SRC

**** org-download
Drag-and-drop images for org-mode.
#+BEGIN_SRC emacs-lisp
  (use-package org-download
    :ensure t
    :config
    (setq org-download-screenshot-method "gm import %s")
    (setq org-download-method 'attach))
#+END_SRC

* Major modes
** aurel
Search, vote and download AUR packages.
#+BEGIN_SRC emacs-lisp
  (use-package aurel
    :ensure t
    :commands (aurel-package-info
               aurel-package-search
               aurel-maintainer-search
               aurel-installed-packages))
#+END_SRC

** TRAMP
Acces distant files as local ones with TRAMP (Transparent Remote
Access, Multiple Protocols).

I had stumbled upon [[http://git.savannah.gnu.org/cgit/tramp.git/commit/?id=69929c2728460fd8e2d965ad61b76cddc48ff1c5][a]] [[http://git.savannah.gnu.org/cgit/tramp.git/commit/?id=73aa25684228120df164687a68c1d55dc53be89c][couple]] of bugs in TRAMP 2.2.11 â the built-in
version in Emacs 24.5.1 â which are now fixed in the master branch.
And as TRAMP isn't available in MELPA and co. I need to compile it
from the source.

The backups of the files opened with TRAMP are stored in the same
direcotry as local ones. When connecting through ssh use the default
settings form =~/.ssh/config= and use the default history file. The
last part is a little bit of sorcery to edit root owned files file,
via sudo, on a remote machine with =/sudo:remote_machine:/=.
#+BEGIN_SRC emacs-lisp
  (use-package tramp
    :quelpa (tramp :fetcher git
                   :url "git://git.savannah.gnu.org/tramp.git"
                    :files ("lisp/*.el"))
    :config
    (setq tramp-backup-directory-alist backup-directory-alist)
    (setq tramp-verbose 2)
    (setq tramp-use-ssh-controlmaster-options nil)
    (setq tramp-histfile-override nil)
    (setq tramp-persistency-file-name
          (expand-file-name "tramp" bricewge/emacs-history-directory))
    (setq tramp-default-proxies-alist
          '(((regexp-quote (system-name)) nil nil)
            (nil "\\`root\\'" "/ssh:%h:"))))
#+END_SRC

** ERC
#+BEGIN_SRC emacs-lisp
  (require 'erc)
  (setq erc-log-channels-directory (expand-file-name "erc/log/" user-emacs-directory))
  (unless (file-exists-p erc-log-channels-directory)
    (make-directory erc-log-channels-directory t))

  (setq erc-server "irc.freenode.net"
        erc-port 6667
        erc-nick "lambpha"
        erc-prompt-for-password nil)

  ;(setq erc-autojoin-channels-alist
  ;("freenode.net" "#emacs" "#org-mode" "#reprap-fr")))
#+END_SRC

** Calendar
Localize the date and time for France and set the French official holidays.
#+BEGIN_SRC emacs-lisp
  (setq calendar-date-style 'european
        calendar-time-display-form '(24-hours ":" minutes
                                              (if time-zone " (")
                                              time-zone
                                              (if time-zone ")")))

  (setq french-holiday
        '((holiday-fixed 1 1 "Jour de l'an")
          (holiday-fixed 5 1 "FÃªte du Travail")
          (holiday-fixed 5 8 "FÃªte de la Victoire")
          (holiday-fixed 7 14 "FÃªte nationale FranÃ§aise")
          (holiday-fixed 8 15 "Assomption")
          (holiday-fixed 11 1 "Toussaint")
          (holiday-fixed 11 11 "Armistice")
          (holiday-fixed 12 25 "NoÃ«l")
          (holiday-easter-etc 1 "Lundi de PÃ¢ques")
          (holiday-easter-etc 39 "Jeudi de l'Ascension")
          (holiday-easter-etc 50 "Lundi de PentecÃ´te"))
        calendar-holidays (append french-holiday)
        calendar-mark-holidays-flag t)
#+END_SRC

Use Perpignan location, for the geting the sunset and sunrise time.
#+BEGIN_SRC emacs-lisp
  (setq calendar-longitude 2.89
        calendar-latitude 42.69)
#+END_SRC

Translate the days, months and their abbreviations in French.
#+BEGIN_SRC emacs-lisp
  (setq calendar-week-start-day 1
        calendar-day-name-array ["Dimanche" "Lundi" "Mardi" "Mercredi"
                                 "Jeudi" "Vendredi" "Samedi"]
        calendar-day-abbrev-array ["Dim" "Lun" "Mar" "Mer"
                                         "Jeu" "Ven" "Sam"]
        calendar-day-header-array ["Di" "Lu" "Ma" "Me"
                                         "Je" "Ve" "Sa"]
        calendar-month-name-array ["Janvier" "FÃ©vrier" "Mars" "Avril" "Mai"
                                   "Juin" "Juillet" "AoÃ»t" "Septembre"
                                   "Octobre" "Novembre" "DÃ©cembre"]
        calendar-month-abbrev-array ["Jan" "FÃ©v" "Mar" "Avr" "Mai"
                                   "Jun" "Jul" "AoÃ»" "Sep"
                                   "Oct" "Nov" "DÃ©c"])
#+END_SRC

Set the schedule or deadline date with french names.
#+BEGIN_SRC emacs-lisp
  (use-package parse-time
    :config
    (setq parse-time-weekdays
          (append parse-time-weekdays
                  '(("dim" . 0)
                    ("lun" . 1)
                    ("mar" . 2)
                    ("mer" . 3)
                    ("jeu" . 4)
                    ("ven" . 5)
                    ("sam" . 6)
                    ("dimanche" . 0)
                    ("lundi" . 1)
                    ("mardi" . 2)
                    ("mercredi" . 3)
                    ("jeudi" . 4)
                    ("vendredi" . 5)
                    ("samedi" . 6)))
          parse-time-months
          (append parse-time-months
                  '(("jan" . 1)
                    ("fev" . 2)
                    ("mar" . 3)
                    ("avr" . 4)
                    ("mai" . 5)
                    ("jun" . 6)
                    ("jul" . 7)
                    ("aoÃ»" . 8)
                    ("sep" . 9)
                    ("oct" . 10)
                    ("nov" . 11)
                    ("dec" . 12)
                    ("janvier" . 1)
                    ("fÃ©vrier" . 2)
                    ("mars" . 3)
                    ("avril" . 4)
                    ("mai" . 5)
                    ("juin" . 6)
                    ("juillet" . 7)
                    ("aoÃ»t" . 8)
                    ("septembre" . 9)
                    ("octobre" . 10)
                    ("novembre" . 11)
                    ("dÃ©cembre" . 12)))))
#+END_SRC

** Magit
Git interface in Emacs.

Use the great ivy for completion in Magit.
Don't ask to confirm when pushing to the default upstream branch.
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :commands magit-status
    :bind ("C-x g" . magit-status)
    :init
    (magit-wip-after-save-mode)
    (magit-wip-after-apply-mode)
    (magit-wip-after-apply-mode)
    :config
    (setq magit-completing-read-function 'ivy-completing-read)
    (setq magit-push-always-verify nil))
#+END_SRC

*** git-timemachine
Step through historic versions of git controlled file.
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t)
#+END_SRC

Same thing but for autosaved commits.
I've disabled it since it doesn't use =magit= function yet. Hoping
it'll be fixed.
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package git-wip-timemachine
    :ensure t)
#+END_SRC

** Dired
Dired is a visual directory editor, an hybride bettewn =cd=, =ls= and
consorts.

Customize how dired buffers are listed:
- a: show hidden files
- l: show as a list
- h: use human redable sizes
- v: sort number naturally (eg: 1, 2, 11 and not 1, 11, 2)
- time-style: use international time style YYYY-MM-DD HH:SS

Display available hard-drive space in a humman readable way. If
several directories has to be deleted, ask to confirm it only one time
not several. Copy from one dired dir to the next dired dir shown in a
split window. Stop dired to confirm when copying a folder. Be clean,
use the trash-bin! Let us have a key that puts the dired buffer into
interactive renaming mode. Hiding hidden files with "Â§" key. Hide
metadata of the files by default, need to be before dired-x.
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :demand t
    :init
    (add-hook 'dired-mode-hook 'dired-hide-details-mode t)
    :commands (dired
               find-name-dired
               find-dired)
    :bind (:map dired-mode-map
                ("C-c e" . wdired-change-to-wdired-mode))
    :config
    (setq delete-by-moving-to-trash t)
    (setq dired-listing-switches "--time-style long-iso -lhvA")
    (setq directory-free-space-args "-h")
    (setq dired-recursive-deletes 'always)
    (setq dired-dwim-target t)
    (setq dired-recursive-copies 'always))
#+END_SRC

*** dired-x
#+BEGIN_SRC emacs-lisp
  (use-package dired-x
    :commands dired-omit-mode
    :bind ("C-x C-j" . dired-jump)
    :bind (:map dired-mode-map
                ("Â§" . dired-omit-mode))
    :init
    (add-to-list 'dired-mode-hook 'dired-omit-mode t)
    :config
    (setq dired-omit-files "^\\...+$"))
#+END_SRC

*** dired-aux
Handle zip compression with Z
#+BEGIN_SRC emacs-lisp
  (use-package dired-aux
    :config
    (add-to-list 'dired-compress-file-suffixes
                 '("\\.zip\\'" ".zip" "unzip")))
#+END_SRC

*** dired-subtree
List files of a directory in a dired buffer.
#+BEGIN_SRC emacs-lisp
  (use-package dired-subtree
    :ensure t
    :bind (:map dired-mode-map
                ("i" . dired-subtree-insert)
                (";" . dired-subtree-remove)
                ("TAB" . dired-subtree-cycle)
                ("<S-iso-lefttab>" . dired-subtree-toggle)))
#+END_SRC

*** dired-open
Open files in dired with the chosen program.
#+BEGIN_SRC emacs-lisp
  (use-package dired-open
    :ensure t
    :bind (:map dired-mode-map
                ("<mouse-2>" . dired-open-file))
    :config
    (setq dired-open-extensions
          '(("mp4" . "vlc")
            ("mkv" . "vlc")
            ("mp3" . "vlc")
            ("ogg" . "vlc")
            ("pdf" . "evince"))))
#+END_SRC

*** dired-toggle-sudo
#+BEGIN_SRC emacs-lisp
  (use-package dired-toggle-sudo
    :ensure t
    :bind ("C-c s" . dired-toggle-sudo))
#+END_SRC

** Games
*** Scores
Put the scores of the games in =~/.emacs.d/history/=.
#+BEGIN_SRC emacs-lisp
  (setq gamegrid-user-score-file-directory bricewge/emacs-history-directory)
#+END_SRC
*** The typing of emacs
A game for improving your typing skills.
#+BEGIN_SRC emacs-lisp
  (use-package typing
    :ensure t
    :config
    (setq toe-highscore-file
          (expand-file-name "toe-scores" bricewge/emacs-history-directory)))
#+END_SRC
** ibffer
#+BEGIN_SRC emacs-lisp
;; Replace the normal buffer by a more advanced one.
(global-set-key (kbd "C-x C-b") 'ibuffer)
(autoload 'ibuffer "ibuffer" "List buffers." t)

;; Group dired buffers
(setq ibuffer-saved-filter-groups
      (quote (("default"
               ("dired" (mode . dired-mode))))))
#+END_SRC
** yaml-mode
#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :demand t
    :mode (("\\.yml$" . yaml-mode)
           ("\\.sls$" . yaml-mode))
    :bind (:map yaml-mode-map
                ("C-m" . newline-and-indent)))
#+END_SRC
** Mediawiki
Mode to edit MediaWiki, with the site I'm used to contribute.
#+BEGIN_SRC emacs-lisp
  (use-package mediawiki
    :ensure t
    :config
    (setq mediawiki-site-alist
          '(("ArchWiki" "https://wiki.archlinux.org/" "bricewge" "" "Main page")
            ("Wikidepia En" "https://en.wikipedia.org/w/" "bricewge" "" "Main Page")
            ("Wikipedia Fr" "https://fr.wikipedia.org/w/" "bricewge" "" "WikipÃ©dia:Accueil principal")))
    (setq mediawiki-site-default "Wikipedia Fr"))
#+END_SRC
** Ledger
#+BEGIN_SRC emacs-lisp
  (use-package ledger-mode
    :ensure t
    :demand t
    :bind (:map ledger-mode-map
                ("<tab>" . outline-cycle)))

  ;; ; Create ledger reports form gpg encrypted files
  ;; (setq ledger-reports
  ;;       '(("g-bal" "gpg -d %(ledger-file) | ledger -f - bal")
  ;;      ("g-reg" "gpg -d %(ledger-file) | ledger -f reg")
  ;;      ("g-payee" "gpg -d %(ledger-file) | ledger -f - reg @%(payee)")
  ;;      ("g-account" "gpg -d %(ledger-file) | ledger -f - reg %(account)")
  ;;      ("bal" "ledger -f %(ledger-file) bal")
  ;;      ("reg" "ledger -f %(ledger-file) reg")
  ;;      ("payee" "ledger -f %(ledger-file) reg @%(payee)")
  ;;      ("account" "ledger -f %(ledger-file) reg %(account)")))

  ;; (defadvice ledger-report-cmd (around ledger-report-gpg)
  ;;   (let ((ledger-reports
  ;;       (if (string(file-name-extension (or (buffer-file-name ledger-buf) "")) "gpg")
  ;;           (mapcar
  ;;            (lambda (report)
  ;;              (list (car report)
  ;;                    (concat
  ;;                     "gpg2 --no-tty --quiet -d %(ledger-file) | ledger -f - "
  ;;                     (mapconcat 'identity (cdddr (split-string (cadr report))) " "))))
  ;;            ledger-reports)
  ;;         ledger-reports)))
  ;;     ad-do-it))

  ;; (ad-activate 'ledger-report-cmd)
#+END_SRC
** conf-mode
Enable conf-mode for systemd service files, snippet [[https://wiki.archlinux.org/index.php/Emacs#Syntax_Highlighting_for_Systemd_Files][from the arch wiki.]]
#+BEGIN_SRC emacs-lisp
 (add-to-list 'auto-mode-alist '("\\.service\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.timer\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.target\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.mount\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.automount\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.slice\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.socket\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.path\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.netdev\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.network\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.link\\'" . conf-unix-mode))
 (add-to-list 'auto-mode-alist '("\\.automount\\'" . conf-unix-mode))
#+END_SRC
** mu4e & smtpmail
I use those modes to manage emails. 

It's not possible to use =MELPA= or =Quelpa= to install =mu= because
it require extra build steps. Until [[https://github.com/djcb/mu/issues/370][this issue]] is solved, I need to
install it [[https://aur.archlinux.org/packages/mu-git/][from the AUR]] or building it [[http://www.djcbsoftware.nl/code/mu/mu4e/Installation.html#Installation][manualy.]]
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
  (require 'mu4e)
  (require 'smtpmail)
  ;; Use mu4e as the default email client
  (setq mail-user-agent 'mu4e-user-agent)

  ;; these are actually the defaults
  (setq
   mu4e-maildir       "~/courriel"
   mu4e-sent-folder   "/gmail/[Gmail].Messages envoyÃ©s"
   mu4e-drafts-folder "/gmail/[Gmail].Brouillons"
   mu4e-trash-folder  "/gmail/[Gmail].Corbeille")

  ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
  (setq mu4e-sent-messages-behavior 'delete)

  ;; Retrie and index wiht offlineimap every 10 minutes
  (setq
     mu4e-get-mail-command "offlineimap"   ;; or fetchmail, or ...
     mu4e-update-interval 600)             ;; update every 10 minutes

  ;; (See the documentation for `mu4e-sent-messages-behavior' if you have
  ;; additional non-Gmail addresses and want assign them different
  ;; behavior.)

  ;; setup some handy shortcuts
  ;; you can quickly switch to your Inbox -- press ``ji''
  ;; then, when you want archive some messages, move them to
  ;; the 'All Mail' folder by pressing ``ma''.

  (setq mu4e-maildir-shortcuts
      '( ("/gmail/INBOX"               . ?i)
         ("/gmail/[Gmail].Messages envoyÃ©s"   . ?s)
         ("/gmail/[Gmail].Corbeille"       . ?c)
         ("/gmail/[Gmail].Tous les messages"    . ?t)

         ("/UPVD/INBOX" . ?u)
         ("/UPVD/INBOX.Archives" . ?a)
         ))

  ;; allow for updating mail using 'U' in the main view:
  (setq mu4e-get-mail-command "offlineimap")


  ;; Hide duplicates mail caused by gmail virtual folders
  ;; http://www.djcbsoftware.nl/code/mu/mu4e/Other-search-functionality.html#Including-related-messages
  (setq mu4e-headers-skip-duplicates  t)

  (defvar my-mu4e-account-alist
    '(("Gmail"
           ;; about me
           (user-mail-address      "brice.wge@gmail.com")
           (user-full-name         "Brice Waegeneire")
           (mu4e-compose-signature "Brice Waegeneire\nhttp://bricewge.fr")
           ;; mu4e
           (mu4e-sent-folder   "/gmail/[Gmail].Messages envoyÃ©s") 
           (mu4e-drafts-folder "/gmail/[Gmail].Brouillons")
           (mu4e-trash-folder  "/gmail/[Gmail].Corbeille")
           (mu4e-refile-folder "/gmail/[Gmail].Tous les messages")
           ;; smtp
           (smtpmail-stream-type starttls)
           (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil)))
           (smtpmail-auth-credentials '(("smtp.gmail.com" 587 "brice.wge@gmail.com" nil)))
           (smtpmail-default-smtp-server "smtp.gmail.com")
           (smtpmail-smtp-server "smtp.gmail.com")
           (smtpmail-smtp-service 587)
           smtpmail-queue-dir "~/courriel/gmail/queue")
      ("UPVD"
           ;; about me
           (user-mail-address      "brice.waegeneire@etudiant.univ-perp.fr")
           (user-full-name         "Brice Waegeneire")
           (mu4e-compose-signature "Brice Waegeneire\nÃtudiant en L2 BioEco Ã  l'UPVD.")
           ;; mu4e
           (mu4e-sent-folder   "/upvd/INBOX.EnvoyÃ©") 
           (mu4e-drafts-folder "/upvd/INBOX.Brouillons")
           ;; smtp
           (smtpmail-stream-type starttls)
           (smtpmail-starttls-credentials '(("imapetu.univ-perp.fr" 587 nil nil)))
           (smtpmail-auth-credentials '(("imapetu.univ-perp.fr" 587 "z9123069" nil)))
           (smtpmail-default-smtp-server "imapetu.univ-perp.fr")
           (smtpmail-smtp-service 587)
           )))


  ;;
  ;; Found here - http://www.djcbsoftware.nl/code/mu/mu4e/Multiple-accounts.html
  ;; 
  (defun my-mu4e-set-account ()
    "Set the account for composing a message."
    (let* ((account
            (if mu4e-compose-parent-message
                (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                  (string-match "/\\(.*?\\)/" maildir)
                  (match-string 1 maildir))
              (completing-read (format "Compose with account: (%s) "
                                       (mapconcat #'(lambda (var) (car var))
                                                  my-mu4e-account-alist "/"))
                               (mapcar #'(lambda (var) (car var)) my-mu4e-account-alist)
                               nil t nil nil (caar my-mu4e-account-alist))))
           (account-vars (cdr (assoc account my-mu4e-account-alist))))
      (if account-vars
          (mapc #'(lambda (var)
                    (set (car var) (cadr var)))
                account-vars)
        (error "No email account found"))))

  (add-hook 'mu4e-compose-pre-hook 'my-mu4e-set-account)
#+END_SRC

*** Encryption
I have found the following code [[http://zmalltalker.com/linux/emacs_mail_encryption.html][here]].
#+BEGIN_SRC emacs-lisp
  (add-hook 'mu4e-compose-mode-hook
            (defun my-setup-epa-hook ()
              (epa-mail-mode)))
  (add-hook 'mu4e-view-mode-hook
            (defun my-view-mode-hook ()
              (epa-mail-mode)))
#+END_SRC

*** Misc configuration
http://www.djcbsoftware.nl/code/mu/mu4e/Some-other-useful-settings.html
use 'fancy' non-ascii characters in various places in mu4e
#+BEGIN_SRC emacs-lisp
  (setq mu4e-use-fancy-chars t)
  ;; attempt to show images when viewing messages
  (setq mu4e-view-show-images t)
  ;; Encryption Â¿?
  (setq mml2015-use 'epg)
#+END_SRC

*** TODO org-mode
- [ ] rich text
- [ ] org-mode links

*** smtpmail
Sending mail
#+BEGIN_SRC emacs-lisp
  (setq
   message-send-mail-function 'smtpmail-send-it
   smtpmail-stream-type 'starttls
   smtpmail-smtp-service 587
   ;; Directory to store mail to send when offline
   smtpmail-queue-dir "~/courriel/queue")

  ;; don't keep message buffers around
  (setq message-kill-buffer-on-exit t)
#+END_SRC

** ibuffer-vc
Group ibuffer's list by version control (ie: git) project, or show version control (ie: git) status.
#+BEGIN_SRC emacs-lisp
  (use-package ibuffer-vc
               :ensure t
    :config
    (add-hook 'ibuffer-hook
              (lambda ()
                (ibuffer-vc-set-filter-groups-by-vc-root)
                (unless (eq ibuffer-sorting-mode 'alphabetic)
                  (ibuffer-do-sort-by-alphabetic)))))
#+END_SRC
** scad
Mode used to edit [[http://www.openscad.org/][OpenSCAD]] 3D objects.
#+BEGIN_SRC emacs-lisp
  (use-package scad-mode
    :ensure t
    :mode "\\.scad\\'")
#+END_SRC

Preview SCAD models in Emacs.
#+BEGIN_SRC emacs-lisp
  (use-package scad-preview
    :ensure t
    :commands scad-preview-mode)
#+END_SRC

** arduino
A major mode for editing Arduino sketches.
#+BEGIN_SRC emacs-lisp
  (use-package arduino-mode
    :ensure t
    :mode "\\.\\(pde\\|ino\\)$")
#+END_SRC

** CEDET
Enable compilation and uploading sketches to Arduino microcontrollers.
#+BEGIN_SRC emacs-lisp
  (use-package cedet
    :ensure t)
#+END_SRC

** Markdown
Mode to edit markdown formated files.
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands markdown-mode
    :mode (("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode)
           ("\\.text\\'" . markdown-mode)))
#+END_SRC

** jinja2-mode
#+BEGIN_SRC emacs-lisp
  (use-package jinja2-mode
    :mode (("\\.tmpl\\'" . jinja2-mode)
           ("\\.jinja$" . jinja2-mode))
    :interpreter "jinja2-mode"
    :ensure t)
#+END_SRC

** pkgbuild-mode
#+BEGIN_SRC emacs-lisp
  (use-package pkgbuild-mode
    :mode "/PKGBUILD$"
    :ensure t)
#+END_SRC
** Emacs Speak Statistics
Used for having a R mode.
#+BEGIN_SRC emacs-lisp
  (use-package ess-site
    :ensure ess)
#+END_SRC
** AUCTeX
Needed by [[cdlatex]]
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :ensure t
    :defer t)
#+END_SRC
** nginx
#+BEGIN_SRC emacs-lisp
      (use-package nginx-mode
        :ensure t)
#+END_SRC
** docker
#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t)
#+END_SRC
** multi-term
#+BEGIN_SRC emacs-lisp
  (use-package multi-term
    :ensure t
    :config
    (setq multi-term-program "/bin/zsh"))
#+END_SRC
** Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra
    :ensure t)
#+END_SRC

Zoom with Hydra.
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-zoom (global-map "<f2>")
    "zoom"
    ("g" text-scale-increase "in")
    ("l" text-scale-decrease "out")
    ("r" (text-scale-adjust 0) "reset"))
#+END_SRC

Org-clock for Hydra
#+BEGIN_SRC emacs-lisp
  (bind-key "C-c w" 'hydra-org-clock/body)
   (defhydra hydra-org-clock (:color blue :hint nil)
     "
  Clock   In/out^     ^Edit^   ^Summary     (_?_)
  -----------------------------------------
          _i_n         _e_dit   _g_oto entry
          _c_ontinue   _q_uit   _d_isplay
          _o_ut        ^ ^      _r_eport
        "
     ("i" org-clock-in)
     ("o" org-clock-out)
     ("c" org-clock-in-last)
     ("e" org-clock-modify-effort-estimate)
     ("q" org-clock-cancel)
     ("g" org-clock-goto)
     ("d" org-clock-display)
     ("r" org-clock-report)
     ("?" (org-info "Clocking commands")))
#+END_SRC

Move windows with Hydra
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-M-o") 'hydra-window/body)

  (defhydra hydra-window (:color red
                          :hint nil)
      "
     Split: _v_ert _x_:horz
    Delete: _o_nly  _da_ce  _dw_indow  _db_uffer  _df_rame
      Move: _s_wap
    Frames: _f_rame new  _df_ delete
      Misc: _m_ark _a_ce  _u_ndo  _r_edo"
      ("h" windmove-left)
      ("j" windmove-down)
      ("k" windmove-up)
      ("l" windmove-right)
      ("H" hydra-move-splitter-left)
      ("J" hydra-move-splitter-down)
      ("K" hydra-move-splitter-up)
      ("L" hydra-move-splitter-right)
      ("|" (lambda ()
             (interactive)
             (split-window-right)
             (windmove-right)))
      ("_" (lambda ()
             (interactive)
             (split-window-below)
             (windmove-down)))
      ("v" split-window-right)
      ("x" split-window-below)
      ;("t" transpose-frame "'")
      ;; winner-mode must be enabled
      ("u" winner-undo)
      ("r" winner-redo) ;;Fixme, not working?
      ("o" delete-other-windows :exit t)
      ("a" ace-window :exit t)
      ("f" new-frame :exit t)
      ("s" ace-swap-window)
      ("da" ace-delete-window)
      ("dw" delete-window)
      ("db" kill-this-buffer)
      ("df" delete-frame :exit t)
      ("q" nil)
      ;("i" ace-maximize-window "ace-one" :color blue)
      ;("b" ido-switch-buffer "buf")
      ("m" headlong-bookmark-jump))
#+END_SRC
** ace-window
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (setq aw-keys '(?q ?s ?d ?f ?g ?h ?j ?k ?l)))
#+END_SRC
** diff
Display diffs in a modern compact way.
#+BEGIN_SRC emacs-lisp
  (setq diff-switches "-u")
#+END_SRC

** eshell
Store eshell history in the appropriate directory.
#+BEGIN_SRC emacs-lisp
  (setq eshell-history-file-name
        (expand-file-name "eshell" bricewge/emacs-history-directory))
#+END_SRC
* Minor modes
** auto-complete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
    :commands auto-complete-mode
    :config
    (setq ac-comphist-file
          (expand-file-name "auto-complete" bricewge/emacs-history-directory)))
#+END_SRC
** winner
For hydra windows.
#+BEGIN_SRC emacs-lisp
  (winner-mode 1)
#+END_SRC
** Auto Fill Mode
#+BEGIN_SRC emacs-lisp
  ;; Maximum line lenght is 70
  (setq-default fill-column 70)
  ;; Enable auto-fill-mode to avoid having long lines.
  (auto-fill-mode 1)
  (setq comment-auto-fill-only-comments t)

  ;; The end of a sentance is defiend by a period and one space ; not
  ;; two spaces
  (setq sentence-end-double-space nil)

  ;; Use it in the folowing modes
  (add-hook 'org-mode-hook 'auto-fill-mode)
  ;(add-hook 'sh-mode-hook 'auto-fill-mode)
  (add-hook 'emacs-lisp-mode-hook 'auto-fill-mode)
#+END_SRC
** git-gutter
Display on the left side an indicator whether a line has been inserted, modified or deleted.
#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :demand t
    :bind (("C-x C-g" . git-gutter:toggle)
           ("C-x v =" . git-gutter:popup-hunk)
           ("C-x p" . git-gutter:previous-hunk)
           ("C-x n" . git-gutter:next-hunk)
           ("C-x v s" . git-gutter:stage-hunk)
           ("C-x v r" . git-gutter:revert-hunk))
    :config
    (global-git-gutter-mode +1)
    (setq git-gutter:update-interval 2)
    (setq git-gutter:update-commands '(ido-switch-buffer previous-buffer next-buffer))
    (setq git-gutter:hide-gutter t))
#+END_SRC

If a mode doesn't work well with git-gutter it should go in the
following list.
#+BEGIN_SRC emacs-lisp :tangle no
(setq git-gutter:disabled-modes
'())
#+END_SRC
** Easy PG
#+BEGIN_SRC emacs-lisp
  (require 'epa-file)
  (setq epa-armor t)
#+END_SRC

** wcheck-mode
#+BEGIN_SRC emacs-lisp
  (use-package wcheck-mode
    :ensure t
    :bind
    (("C-c o" . wcheck-mode)
     ("C-c i" . wcheck-change-language)
     ("M-$" . wcheck-actions)
     ("C-c n" . wcheck-jump-forward)
     ("C-c p" . wcheck-jump-backward))
    :init
    (setq wcheck-language-data
        '(("French"
           (program . "/usr/bin/enchant")
           (args "-l" "-d" "fr_FR")
           (action-program . "/usr/bin/enchant")
           (action-args "-a" "-d" "fr_FR")
           (action-parser . enchant-suggestions-menu))
          ("English"
           (program . "/usr/bin/enchant")
           (args "-l" "-d" "en_US")
           (action-program . "/usr/bin/enchant")
           (action-args "-a" "-d" "en_US")
           (action-parser . enchant-suggestions-menu))
          ))
    (setq wcheck-language "French"))

  (defun enchant-suggestions-menu (marked-text)
    (cons (cons "[Add to dictionary]" 'enchant-add-to-dictionary)
          (wcheck-parser-ispell-suggestions)))

  (defvar enchant-dictionaries-dir "~/.config/enchant")

  (defun enchant-add-to-dictionary (marked-text)
    (let* ((word (aref marked-text 0))
           (language (aref marked-text 4))
           (file (let ((code (nth 1 (member "-d" (wcheck-query-language-data
                                                  language 'action-args)))))
                   (when (stringp code)
                     (concat (file-name-as-directory enchant-dictionaries-dir)
                             code ".dic")))))
      (when (and file (file-writable-p file))
        (with-temp-buffer
          (insert word) (newline)
          (append-to-file (point-min) (point-max) file)
          (message "Added word \"%s\" to the %s dictionary"
                   word language)))))

  ;(set-face-attribute 'wcheck-default-face nil :underline (:color "red" :style wave))
  ;(add-hook 'org-mode-hook 'wcheck-mode)
#+END_SRC
** langtool
Style and Grammar Checker.
It need the =[[https://www.archlinux.org/packages/community/any/languagetool/][languagetool]]= package installed.
#+BEGIN_SRC emacs-lisp
  (use-package langtool
    :ensure t
    :pin melpa-stable
    :bind (("C-x 4 w" . langtool-check)
           ("C-x 4 W" . langtool-check-done)
           ("C-x 4 l" . langtool-switch-default-language)
           ("C-x 4 4" . langtool-show-message-at-point)
           ("C-x 4 c" . langtool-correct-buffer))
    :config
    (setq langtool-java-classpath "/usr/share/languagetool:/usr/share/java/languagetool/*")
    (setq langtool-default-language "fr")
    (setq langtool-mother-tongue "fr")
    )
#+END_SRC
** jedi
Python auto-completion.
#+BEGIN_SRC emacs-lisp
  (use-package jedi
    :ensure t
    :commands jedi:setup
    :bind (("C-c h" . jedi:show-doc)
           ("C-c ;" . jedi:goto-definition))
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    :config
    (unless (file-exists-p (expand-file-name ".python-environments/"
                                             user-emacs-directory))
      (jedi:install-server))
    (setq jedi:complete-on-dot t))
#+END_SRC
** outshine
outshine allow org-mode's style of navigation in other major modes.

On mba42 S-TAB is actually <S-iso-lefttab>, this give the same
behavior to the latter. When TAB is pressed on the first
character call outline-cycle instead of outshine-cycle-buffer.
Like the default in Org-mode. Open files with headers folded.
#+BEGIN_SRC emacs-lisp
  (use-package outshine
    :ensure t
    :commands outshine-hook-function
    :init
    (add-hook 'outline-minor-mode-hook 'outshine-hook-function)
    (add-hook 'emacs-lisp-mode-hook 'outline-minor-mode)
    (add-hook 'conf-mode-hook 'outline-minor-mode)
    (add-hook 'sh-mode-hook 'outline-minor-mode)
    (add-hook 'yaml-mode-hook 'outline-minor-mode)
    (add-hook 'css-mode-hook 'outline-minor-mode)
    (add-hook 'ledger-mode-hook 'outline-minor-mode)
    (add-hook 'scad-mode-hook 'outline-minor-mode)
    (add-hook 'arduino-mode-hook 'outline-minor-mode)
    (add-hook 'ruby-mode-hook 'outline-minor-mode)
    (add-hook 'javascript-mode-hook 'outline-minor-mode)
    :bind (:map outline-minor-mode-map
                ("<S-iso-lefttab>" . outshine-cycle-buffer))
    :config
    (setq outshine-org-style-global-cycling-at-bob-p t)
    (setq outshine-startup-folded-p nil))
#+END_SRC
** ffap
#+BEGIN_SRC emacs-lisp
  ; One command to open both files and URLs.
  (require 'ffap)
  ; When called by ffap URLs are opend within emacs.
  (setq ffap-url-fetcher 'browse-url-emacs
        ffap-directory-finder 'nautilus)
#+END_SRC
** rainbow-mode
Displays strings representing colors with the color they represent as
background.
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :commands rainbow-mode
    :init
    (add-hook 'css-mode-hook 'rainbow-mode))
#+END_SRC
** beeminder						      :old:
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'beeminder)
  (defun beeminder-authentify ()
    "Authentify user from .authinfo file.
  You have to setup correctly `auth-sources' to make this function
  finding the path of your .authinfo file that is normally ~/.authinfo."
    (let ((beeminder-auth
           (auth-source-user-or-password  '("login" "password")
                                          "beeminder.com:443"
                                          "https")))
      (when beeminder-auth
        (setq beeminder-username (car beeminder-auth)
              beeminder-auth-token (cadr beeminder-auth))
        nil)))

  (beeminder-authentify)
#+END_SRC
** recentf						      :old:
Keep buffer open across emacs sessions
#+BEGIN_SRC emacs-lisp :tangle no
  (require 'recentf)
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
#+END_SRC
** undo-tree
Use undo-tree everywhere. But hide it from the mode-line.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :bind (("C-x u" . undo-tree-visualize)
           ("C-_" . undo-tree-undo)
           ("M-_" . undo-tree-redo))
    :diminish undo-tree-mode
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-diff t))
#+END_SRC
** guidekey
#+BEGIN_SRC emacs-lisp
  (use-package guide-key
    :ensure t)
#+END_SRC
** visual-regexp
A regexp/replace command for Emacs with interactive visual feedback.
https://github.com/benma/visual-regexp.el
#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :ensure t
    :bind (("C-c r" . vr/replace)
           ("C-c q" . vr/query-replace))
    )
#+END_SRC
** Swiper
Isearch with an overview.
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :demand t
    :diminish ivy-mode
    :commands (swiper ivy-completing-read)
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ([f6] . ivy-resume))
    :bind (:map ivy-minibuffer-map
                ("RET" . ivy-alt-done))
    :config
    (ivy-mode 1)
    ;; Fuzzy matching
    (setq ivy-re-builders-alist
          '((t . ivy--regex-fuzzy)))
    (setq ivy-initial-inputs-alist nil)
    ;; TMP settings
    (setq colir-compose-method "")
    (setq ivy-format-function 'ivy-format-function-line))
#+END_SRC

** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :config
    (setq smex-save-file
          (expand-file-name "smex-items" bricewge/emacs-history-directory))
    (setq smex-history-length 100))
#+END_SRC

** flx
Fuzzy matching in Emacs, especially for using it with ivy.

Garbage colector set to 20Â MB as said in the [[https://github.com/lewang/flx#gc-optimization][README]].
#+BEGIN_SRC emacs-lisp
  (use-package flx
    :ensure t
    :config
    (setq gc-cons-threshold 20000000))
#+END_SRC

** cdlatex
Speed-up insertion of LaTeX environments and math templates. Need
[[AUCTeX]].
#+BEGIN_SRC emacs-lisp
      (use-package cdlatex
        :ensure t
        :config
        (add-hook 'org-mode-hook 'turn-on-org-cdlatex))
#+END_SRC

** platformio
PlatformIO is an open source ecosystem for IoT (arduino, esp8266, \dots)
development.
#+BEGIN_SRC emacs-lisp
  (use-package platformio-mode
    :ensure t
    :commands platformio-mode
    :init
    (add-hook 'c++-mode-hook 'platformio-mode)
    :config
    ;; Enable scrolling and colours in the compile buffer.
    (platformio-setup-compile-buffer))
#+END_SRC

* Temporary
** counsel
Replace setting tags in org-mode with counsel:
- =C-m= selects and exits,
- =C-M-m= selects without exiting, so you can select multiple tags.
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :commands (counsel-org-tag counsel-org-tag-agenda)
    :bind (("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("C-h f" . counsel-describe-function)
           ("C-h v" . counsel-describe-variable))
    :init
    (with-eval-after-load 'org
      (bind-key "C-q" #'counsel-org-tag org-mode-map))
    (with-eval-after-load 'org-agenda
      (bind-key "C-q" #'counsel-org-tag-agenda org-agenda-mode-map)))
#+END_SRC

** beacon
[[https://github.com/Malabarba/beacon][beacon]] helps me to find the cursor when it change positions, by
highligthing where it moved.
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :if (not (daemonp))
    :diminish beacon-mode
    :config
    (beacon-mode 1)
    (setq beacon-blink-when-point-moves-vertically 20)
    (setq beacon-blink-when-focused t)
    (add-to-list 'beacon-dont-blink-major-modes 'undo-tree-visualizer-mode t))
#+END_SRC

** transmission
{% endraw %}
Give you acces to your transmission daemon in Emacs!
#+BEGIN_SRC emacs-lisp
  (use-package transmission
    :ensure t
    :config
    (setq transmission-host "{{ salt['pillar.get']('dotfiles:emacs:transmission:host') }}")
    (setq transmission-rpc-auth
          '(:username "{{ salt['pillar.get']('dotfiles:emacs:transmission:username') }}"
            :password "{{ salt['pillar.get']('dotfiles:emacs:transmission:password') }}"))
    (setq transmission-timer-p t)
    (setq transmission-time-format "%F %R"))
#+END_SRC
*** TODO Make an hydra for transmission.el

* End
*Dirty* workaround for [[https://github.com/bbatsov/solarized-emacs/issues/18][incorrect colours in terminal]]. Need to be at the end of
the config file.
#+BEGIN_SRC emacs-lisp :tangle no
  (custom-set-faces (if (not window-system) '(default ((t (:background "nil"))))))
#+END_SRC
